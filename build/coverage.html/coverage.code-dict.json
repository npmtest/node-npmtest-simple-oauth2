{"/home/travis/build/npmtest/node-npmtest-simple-oauth2/test.js":"/* istanbul instrument in package npmtest_simple_oauth2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-simple-oauth2/lib.npmtest_simple_oauth2.js":"/* istanbul instrument in package npmtest_simple_oauth2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_simple_oauth2 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_simple_oauth2 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-simple-oauth2/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-simple-oauth2 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_simple_oauth2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_simple_oauth2\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_simple_oauth2.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_simple_oauth2.rollup.js'] =\n            local.assetsDict['/assets.npmtest_simple_oauth2.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_simple_oauth2.__dirname +\n                    '/lib.npmtest_simple_oauth2.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-simple-oauth2/node_modules/simple-oauth2/index.js":"'use strict';\n\nconst joi = require('joi');\nconst authCodeModule = require('./lib/client/auth-code');\nconst passwordModule = require('./lib/client/password');\nconst accessTokenModule = require('./lib/client/access-token');\nconst clientCredentialsModule = require('./lib/client/client');\n\nconst optionsSchema = joi\n  .object()\n  .keys({\n    client: joi.object().keys({\n      id: joi.string().required(),\n      secret: joi.string().required(),\n      secretParamName: joi.string().default('client_secret'),\n      idParamName: joi.string().default('client_id'),\n    }).required(),\n    auth: joi.object().keys({\n      tokenHost: joi.string().required().uri(['http', 'https']),\n      tokenPath: joi.string().default('/oauth/token'),\n      revokePath: joi.string().default('/oauth/revoke'),\n      authorizeHost: joi.string().default(joi.ref('tokenHost')),\n      authorizePath: joi.string().default('/oauth/authorize'),\n    }).required(),\n    http: joi.object().keys({\n      headers: joi.object().default({\n        Accept: 'application/json',\n      }),\n    }).default().unknown(true),\n    options: joi.object().keys({\n      bodyFormat: joi.any().valid('form', 'json').default('form'),\n      useBasicAuthorizationHeader: joi.boolean().default(true),\n      useBodyAuth: joi.boolean().default(true),\n    }).default(),\n  });\n\nmodule.exports = {\n\n  /**\n   * Creates a new simple-oauth2 client\n   * with the passed configuration\n   *\n   * @param  {Object}  options Module options as defined in schema\n   */\n  create(options) {\n    let moduleOptions = Object.assign({}, options || {});\n    moduleOptions = joi.attempt(\n      moduleOptions,\n      optionsSchema,\n      'Invalid options provided to simple-oauth2.'\n    );\n\n    return {\n      authorizationCode: authCodeModule(moduleOptions),\n      ownerPassword: passwordModule(moduleOptions),\n      clientCredentials: clientCredentialsModule(moduleOptions),\n      accessToken: accessTokenModule(moduleOptions),\n    };\n  },\n};\n","/home/travis/build/npmtest/node-npmtest-simple-oauth2/node_modules/simple-oauth2/lib/client/auth-code.js":"'use strict';\n\nconst url = require('url');\nconst qs = require('querystring');\nconst coreModule = require('./../core');\n\n/**\n * Authorization Code flow implementation\n */\nmodule.exports = (config) => {\n  const core = coreModule(config);\n  const tokenUrl = url.resolve(config.auth.tokenHost, config.auth.tokenPath);\n  const authorizeUrl = url.resolve(config.auth.authorizeHost, config.auth.authorizePath);\n\n  /**\n   * Redirect the user to the autorization page\n   * @param  {String} params.redirectURI A string that represents the registered application URI\n   *                                     where the user is redirected after authentication\n   * @param {String} params.scope A String that represents the application privileges\n   * @param {String} params.state A String that represents an option opaque value used by the client\n   *                              to main the state between the request and the callback\n   * @return {String} the absolute authorization url\n   */\n  function authorizeURL(params) {\n    const options = Object.assign({}, params || {}, {\n      response_type: 'code',\n      client_id: config.client.id,\n    });\n\n    return `${authorizeUrl}?${qs.stringify(options)}`;\n  }\n\n  /**\n   * Returns the Access Token Object\n   * @param  {String} params.code Authorization code (from previous step)\n   * @param  {String} params.redirecURI A string that represents the callback uri\n   * @param  {Function} callback\n   * @return {Promise}\n   */\n  function getToken(params, callback) {\n    const options = Object.assign({}, params || {}, {\n      grant_type: 'authorization_code',\n    });\n\n    return core\n      .api('POST', tokenUrl, options)\n      .nodeify(callback);\n  }\n\n  return {\n    authorizeURL,\n    getToken,\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-simple-oauth2/node_modules/simple-oauth2/lib/core.js":"'use strict';\n\nconst Promise = require('bluebird');\nconst debug = require('debug')('simple-oauth2:main');\nconst utils = require('./utils');\nconst HTTPError = require('./error');\nconst request = Promise.promisify(require('request'));\n\n/**\n * Parse the oauth server response\n * Decides wether or not the response is accepted\n * @param  {response} response raw response object\n * @param  {Object} body\n * @param  {Function} callback\n * @return {Promise}\n */\nfunction parseReponse(response, body) {\n  debug('Checking response body', body);\n\n  try {\n    body = JSON.parse(body);\n  } catch (e) {\n    /* The OAuth2 server does not return a valid JSON */\n  }\n\n  if (response.statusCode >= 400) {\n    return Promise.reject(new HTTPError(response.statusCode, body));\n  }\n\n  return Promise.resolve(body);\n}\n\nmodule.exports = (config) => {\n  // makes an http request\n  function call(method, url, params) {\n    const options = Object.assign({}, {\n      method,\n      uri: url,\n    }, config.http);\n\n    // api authenticated call sent using headers\n    if (params.access_token && !params[config.client.idParamName]) {\n      options.headers.Authorization = `Bearer ${params.access_token}`;\n\n      delete params.access_token;\n\n    // oauth2 server call used to retrieve a valid token\n    } else if (config.options.useBasicAuthorizationHeader &&\n      config.client.id &&\n      !params[config.client.idParamName]) {\n      const basicHeader = utils.getAuthorizationHeaderToken(config.client.id, config.client.secret);\n      options.headers.Authorization = `Basic ${basicHeader}`;\n    }\n\n    if (Object.keys(params).length === 0) params = null;\n    if (method !== 'GET') {\n      if (config.options.bodyFormat === 'form') {\n        options.form = params;\n      } else if (config.options.bodyFormat === 'json') {\n        options.json = true;\n        options.body = params;\n      } else {\n        // joi should prevent us from getting here, but throw to be safe.\n        throw new Error(\n          `Unknown bodyFormat value: ${config.options.bodyFormat}`\n        );\n      }\n    }\n\n    if (method === 'GET') options.qs = params;\n\n    // Enable the system to send authorization params in the body.\n    if (config.options.useBodyAuth) {\n      if (options.form) {\n        // An example using `form` authorization params in the body is the\n        // GitHub API.\n        options.form[config.client.idParamName] = config.client.id;\n        options.form[config.client.secretParamName] = config.client.secret;\n      } else if (options.json) {\n        // An example using `json` authorization params in the body is the\n        // Amazon Developer Publishing API.\n        options.body[config.client.idParamName] = config.client.id;\n        options.body[config.client.secretParamName] = config.client.secret;\n      } else {\n        // joi should prevent us from getting here, but throw to be safe.\n        throw new Error(\n          `Unable to write bodyAuth for bodyFormat: ${config.options.bodyFormat}`\n        );\n      }\n    }\n\n    debug('Making the HTTP request', options);\n\n    return request(options);\n  }\n\n  // High level method to call API\n  function api(method, url, params, callback) {\n    if (typeof params === 'function') {\n      callback = params;\n      params = {};\n    }\n\n    debug('OAuth2 Node Request');\n\n    return call(method, url, params)\n      .spread(parseReponse)\n      .nodeify(callback);\n  }\n\n  return {\n    call,\n    api,\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-simple-oauth2/node_modules/simple-oauth2/lib/utils.js":"'use strict';\n\nmodule.exports = {\n\n  /**\n   * Get the authorization header used to request a valid token\n   * @param  {String} clientID\n   * @param  {String} clientSecret\n   * @return {String}              Authorization header string token\n   */\n  getAuthorizationHeaderToken(clientID, clientSecret) {\n    return new Buffer(`${clientID}:${clientSecret}`).toString('base64');\n  },\n};\n","/home/travis/build/npmtest/node-npmtest-simple-oauth2/node_modules/simple-oauth2/lib/error.js":"'use strict';\n\n// List of all 4xx and 5xx status code plus their description\nconst statusCodes = {\n  400: 'Bad Request',\n  401: 'Unauthorized',\n  402: 'Payment Required',\n  403: 'Forbidden',\n  404: 'Not Found',\n  405: 'Method Not Allowed',\n  406: 'Not Acceptable',\n  407: 'Proxy Authentication Required',\n  408: 'Request Timeout',\n  409: 'Conflict',\n  410: 'Gone',\n  411: 'Length Required',\n  412: 'Precondition Failed',\n  413: 'Request Entity Too Large',\n  414: 'Request-URI Too Long',\n  415: 'Unsupported Media Type',\n  416: 'Requested Range Not Satisfiable',\n  417: 'Expectation Failed',\n  420: 'Enhance Your Calm',\n  422: 'Unprocessable Entity',\n  423: 'Locked',\n  424: 'Failed Dependency',\n  425: 'Unordered Collection',\n  426: 'Upgrade Required',\n  428: 'Precondition Required',\n  429: 'Too Many Requests',\n  431: 'Request Header Fields Too Large',\n  444: 'No Response',\n  449: 'Retry With',\n  499: 'Client Closed Request',\n  500: 'Internal Server Error',\n  501: 'Not Implemented',\n  502: 'Bad Gateway',\n  503: 'Service Unavailable',\n  504: 'Gateway Timeout',\n  505: 'HTTP Version Not Supported',\n  506: 'Variant Also Negotiates',\n  507: 'Insufficient Storage',\n  508: 'Loop Detected',\n  509: 'Bandwidth Limit Exceeded',\n  510: 'Not Extended',\n  511: 'Network Authentication Required',\n};\n\n/**\n * A NodeJS module to handle OAuth2 server errors\n * @return {Object} HttpError constructor\n */\nfunction HTTPError(status, context) {\n  Error.call(this);\n  Error.captureStackTrace(this, this.constructor);\n\n  this.name = this.constructor.name;\n  this.status = status;\n  this.message = statusCodes[status];\n  this.context = context || null;\n}\n\nHTTPError.prototype = Object.create(Error.prototype);\n\nmodule.exports = HTTPError;\n","/home/travis/build/npmtest/node-npmtest-simple-oauth2/node_modules/simple-oauth2/lib/client/password.js":"'use strict';\n\nconst url = require('url');\nconst coreModule = require('./../core');\n\n/**\n * User Password flow implementation\n */\nmodule.exports = (config) => {\n  const core = coreModule(config);\n  const tokenUrl = url.resolve(config.auth.tokenHost, config.auth.tokenPath);\n\n  /**\n   * Returns the Access Token Object\n   * @param  {String} params.username A string that represents the registered username\n   * @param  {String} params.password A string that represents the registered password.\n   * @param  {String} params.scope A string that represents the application privileges\n   * @param  {Function} callback\n   * @return {Promise}\n   */\n  function getToken(params, callback) {\n    const options = Object.assign({}, params || {}, {\n      grant_type: 'password',\n    });\n\n    return core\n      .api('POST', tokenUrl, options)\n      .nodeify(callback);\n  }\n\n  return {\n    getToken,\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-simple-oauth2/node_modules/simple-oauth2/lib/client/access-token.js":"'use strict';\n\nconst url = require('url');\nconst addSeconds = require('date-fns/add_seconds');\nconst isAfter = require('date-fns/is_after');\nconst isDate = require('date-fns/is_date');\nconst parse = require('date-fns/parse');\nconst coreModule = require('./../core');\n\n/**\n * Wrapper for the Access Token Object\n */\nmodule.exports = (config) => {\n  const core = coreModule(config);\n  const tokenUrl = url.resolve(config.auth.tokenHost, config.auth.tokenPath);\n  const revokeUrl = url.resolve(config.auth.tokenHost, config.auth.revokePath);\n\n  function AccessToken(token) {\n    this.token = token;\n    if ('expires_at' in this.token) {\n      if (!isDate(this.token.expires_at)) {\n        this.token.expires_at = parse(this.token.expires_at);\n      }\n    } else {\n      this.token.expires_at = addSeconds(\n        new Date(),\n        Number.parseInt(token.expires_in, 10)\n      );\n    }\n  }\n\n  /**\n   * Creates an OAuth2.AccessToken instance\n   * @param  {Object} token An object containing the token object returned from the OAuth2 server.\n   */\n  function createAccessToken(tokenToUse) {\n    return new AccessToken(tokenToUse);\n  }\n\n  /**\n  * Check if the access token is expired or not\n  */\n  AccessToken.prototype.expired = function expired() {\n    return isAfter(new Date(), this.token.expires_at);\n  };\n\n  /**\n  * Refresh the access token\n  * @param  {Object} An optional argument for additional API request params.\n  * @param  {Function} callback\n  */\n  AccessToken.prototype.refresh = function refresh(params, callback) {\n    if (typeof params === 'function') {\n      callback = params;\n      params = undefined;\n    }\n\n    const options = Object.assign({}, params || {}, {\n      grant_type: 'refresh_token',\n      refresh_token: this.token.refresh_token,\n    });\n\n    return core\n      .api('POST', tokenUrl, options)\n      .then((response) => createAccessToken(response))\n      .nodeify(callback);\n  };\n\n  /**\n  * Revoke access or refresh token\n  * @param  {String}   tokenType A string containing the type of token to revoke.\n  *                              Should be either \"access_token\" or \"refresh_token\"\n  * @param  {Function} callback\n  */\n  AccessToken.prototype.revoke = function revoke(tokenType, callback) {\n    const token = tokenType === 'access_token' ? this.token.access_token : this.token.refresh_token;\n    const options = {\n      token,\n      token_type_hint: tokenType,\n    };\n\n    return core\n      .api('POST', revokeUrl, options)\n      .nodeify(callback);\n  };\n\n  return {\n    create: createAccessToken,\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-simple-oauth2/node_modules/simple-oauth2/lib/client/client.js":"'use strict';\n\nconst url = require('url');\nconst coreModule = require('./../core');\n\n/**\n * Clients credentials flow implementation\n */\nmodule.exports = (config) => {\n  const core = coreModule(config);\n  const tokenUrl = url.resolve(config.auth.tokenHost, config.auth.tokenPath);\n\n  /**\n   * Returns the Access Token Object\n   * @param  {String} params.scope A string that represents the application privileges\n   * @param  {Function} callback\n   * @return {Promise}\n   */\n  function getToken(params, callback) {\n    const options = Object.assign({}, params || {}, {\n      grant_type: 'client_credentials',\n    });\n\n    return core\n      .api('POST', tokenUrl, options)\n      .nodeify(callback);\n  }\n\n  return {\n    getToken,\n  };\n};\n"}